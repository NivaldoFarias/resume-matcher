generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  CANDIDATE
  RECRUITER
  ADMIN
}

enum JobStatus {
  DRAFT
  PUBLISHED
  CLOSED
  ARCHIVED
}

enum MatchStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// Models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  role      UserRole @default(CANDIDATE)
  firstName String?
  lastName  String?
  clerkId   String   @unique
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations based on role
  postedJobs Job[]    @relation("RecruiterJobs")
  resume     Resume?  @relation("CandidateResume")
  matches    Match[]  @relation("CandidateMatches")
  profile    Profile?

  @@index([email])
  @@index([role])
}

model Job {
  id          String    @id @default(cuid())
  title       String
  company     String
  description String
  location    String
  deleted     Boolean   @default(false)
  status      JobStatus @default(DRAFT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  recruiter   User    @relation("RecruiterJobs", fields: [recruiterId], references: [id])
  recruiterId String
  matches     Match[] @relation("JobMatches")

  @@index([recruiterId])
  @@index([status])
}

model Resume {
  id        String   @id @default(cuid())
  fileUrl   String
  fileName  String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  candidate   User    @relation("CandidateResume", fields: [candidateId], references: [id])
  candidateId String  @unique
  matches     Match[] @relation("ResumeMatches")

  @@index([candidateId])
}

model Match {
  id        String      @id @default(cuid())
  status    MatchStatus @default(PENDING)
  score     Float?
  deleted   Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  job         Job    @relation("JobMatches", fields: [jobId], references: [id])
  jobId       String
  resume      Resume @relation("ResumeMatches", fields: [resumeId], references: [id])
  resumeId    String
  candidate   User   @relation("CandidateMatches", fields: [candidateId], references: [id])
  candidateId String

  @@unique([jobId, resumeId])
  @@index([jobId])
  @@index([resumeId])
  @@index([candidateId])
  @@index([status])
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  deleted   Boolean  @default(false)
  name      String
  email     String   @unique
  phone     String?
  bio       String?  @db.Text
  location  String?
  website   String?
  company   String? // For recruiters
  position  String? // Current position or desired position
  status    String   @default("ACTIVE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([email])
  @@index([status])
}
